LEXEMAS: 
--->linea: 1, Lexema: A , token( ID , 1 )
--->linea: 1, Lexema: broken , token( ID , 2 )
--->linea: 1, Lexema: program , token( ID , 3 )
--->linea: 2, Lexema: def , token( ID , 4 )
--->linea: 2, Lexema: is_even , token( ID , 5 )
--->linea: 2, Lexema: ( , delimitador( ( , LBRACKET )
--->linea: 2, Lexema: x , token( ID , 6 )
--->linea: 2, Lexema: : , delimitador( : , COLON )
--->linea: 3, Lexema: ) , delimitador( ) , RBRACKET )
--->linea: 3, Lexema: - , token( - , MINUS )
--->linea: 3, Lexema: > , token( > , GT )
--->linea: 3, Lexema: bool , token( ID , 7 )
--->linea: 3, Lexema: : , delimitador( : , COLON )
--->linea: 4, Lexema: if , token( ID , 8 )
--->linea: 4, Lexema: x , token( ID , 6 )
--->linea: 4, Lexema: 2 , token( INTEGER_CONST , 2 )
--->linea: 4, Lexema: == , token( == , EQUAL )
--->linea: 4, Lexema: 1 , token( INTEGER_CONST , 1 )
--->linea: 4, Lexema: : , delimitador( : , COLON )
--->linea: 5, Lexema: return , token( ID , 9 )
--->linea: 5, Lexema: 0 , token( INTEGER_CONST , 0 )
--->linea: 5, Lexema: FIXME , token( ID , 10 )
--->linea: 6, Lexema: else , token( ID , 11 )
--->linea: 6, Lexema: : , delimitador( : , COLON )
--->linea: 7, Lexema: return , token( ID , 9 )
--->linea: 7, Lexema: True , token( ID , 12 )
--->linea: 9, Lexema: print , token( ID , 13 )
--->linea: 9, Lexema: ( , delimitador( ( , LBRACKET )
--->linea: 9, Lexema: is_even , token( ID , 5 )
--->linea: 9, Lexema: ( , delimitador( ( , LBRACKET )
--->linea: 9, Lexema: '3' , token( String, '3' )
--->linea: 9, Lexema: ) , delimitador( ) , RBRACKET )
--->linea: 9, Lexema: ) , delimitador( ) , RBRACKET )
--->linea: 9, Lexema: FIXME , token( ID , 10 )
